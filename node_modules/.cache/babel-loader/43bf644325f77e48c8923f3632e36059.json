{"ast":null,"code":"import axios from \"axios\";\n\nconst fetchPosts = async (offset, limit, posts) => {\n  //Requesting posts via state's API parameters.\n  axios({\n    method: \"get\",\n    url: \"https://api.slstice.com/mock/posts?offset=\".concat(offset, \"&limit=\").concat(limit, \"&api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(async ({\n    data: {\n      response\n    }\n  }) => {\n    // Mapping the responses to request the /medias/ endpoint\n    const postArray = await Promise.all( // with the propper parameters, for every retrieved post.\n    response.posts.map(async post => {\n      const _ref = await axios({\n        method: \"get\",\n        url: \"https://api.slstice.com/mock/medias/\".concat(post.mediaId, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n            media = _ref.data.response.media;\n\n      const _ref2 = await axios({\n        method: \"get\",\n        url: \"https://api.slstice.com/mock/users/\".concat(media.owner.username, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n            user = _ref2.data.response.user;\n\n      media.user = user; // Saving freshly fetched media and user object into post's properties.\n\n      post.media = media;\n      return post;\n    })); // Assignation of the newly fetched array of posts to the component's state.\n    // If post is null, return this.setState({ posts: postArray }). Else concatenate old state with new posts.\n\n    return this.state.posts === null ? this.setState({\n      posts: postArray\n    }) : this.setState({\n      posts: [...this.state.posts, ...postArray]\n    });\n  });\n};\n\nexport default fetchPosts;","map":{"version":3,"sources":["/Users/joriscarol/DEV/api-carousel/src/fetchPosts.js"],"names":["axios","fetchPosts","offset","limit","posts","method","url","headers","then","data","response","postArray","Promise","all","map","post","mediaId","media","owner","username","user","state","setState"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,OAAOC,MAAP,EAAeC,KAAf,EAAsBC,KAAtB,KAAgC;AACjD;AAEAJ,EAAAA,KAAK,CAAC;AACJK,IAAAA,MAAM,EAAE,KADJ;AAEJC,IAAAA,GAAG,sDAA+CJ,MAA/C,oBAA+DC,KAA/D,kCAFC;AAGJI,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHL,GAAD,CAAL,CAMGC,IANH,CAMQ,OAAO;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,GAAP,KAAkC;AAAI;AAC1C,UAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAR,EAAkB;AACxCH,IAAAA,QAAQ,CAACN,KAAT,CAAeU,GAAf,CAAmB,MAAMC,IAAN,IAAc;AAAA,mBAK3B,MAAMf,KAAK,CAAC;AACdK,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,gDAAyCS,IAAI,CAACC,OAA9C,kCAFW;AAGdT,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHK,OAAD,CALgB;AAAA,YAGfU,KAHe,QAE7BR,IAF6B,CAG3BC,QAH2B,CAGfO,KAHe;;AAAA,oBAgB3B,MAAMjB,KAAK,CAAC;AACdK,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,+CAAwCW,KAAK,CAACC,KAAN,CAAYC,QAApD,kCAFW;AAGdZ,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHK,OAAD,CAhBgB;AAAA,YAcfa,IAde,SAa7BX,IAb6B,CAc3BC,QAd2B,CAcfU,IAde;;AAuB/BH,MAAAA,KAAK,CAACG,IAAN,GAAaA,IAAb,CAvB+B,CAuBX;;AACpBL,MAAAA,IAAI,CAACE,KAAL,GAAaA,KAAb;AACA,aAAOF,IAAP;AACD,KA1BD,CADsB,CAAxB,CADsC,CA8BtC;AACA;;AACA,WAAO,KAAKM,KAAL,CAAWjB,KAAX,KAAqB,IAArB,GACH,KAAKkB,QAAL,CAAc;AAAElB,MAAAA,KAAK,EAAEO;AAAT,KAAd,CADG,GAEH,KAAKW,QAAL,CAAc;AAAElB,MAAAA,KAAK,EAAE,CAAC,GAAG,KAAKiB,KAAL,CAAWjB,KAAf,EAAsB,GAAGO,SAAzB;AAAT,KAAd,CAFJ;AAGD,GAzCH;AA0CD,CA7CD;;AA+CA,eAAeV,UAAf","sourcesContent":["import axios from \"axios\";\n\nconst fetchPosts = async (offset, limit, posts) => {\n  //Requesting posts via state's API parameters.\n\n  axios({\n    method: \"get\",\n    url: `https://api.slstice.com/mock/posts?offset=${offset}&limit=${limit}&api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(async ({ data: { response } }) => {   // Mapping the responses to request the /medias/ endpoint\n      const postArray = await Promise.all(      // with the propper parameters, for every retrieved post.\n        response.posts.map(async post => {\n          const {\n            data: {\n              response: { media }\n            }\n          } = await axios({\n            method: \"get\",\n            url: `https://api.slstice.com/mock/medias/${post.mediaId}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const {\n            data: {\n              response: { user }\n            }\n          } = await axios({\n            method: \"get\",\n            url: `https://api.slstice.com/mock/users/${media.owner.username}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          media.user = user;  // Saving freshly fetched media and user object into post's properties.\n          post.media = media;\n          return post;\n        })\n      );\n      // Assignation of the newly fetched array of posts to the component's state.\n      // If post is null, return this.setState({ posts: postArray }). Else concatenate old state with new posts.\n      return this.state.posts === null\n        ? this.setState({ posts: postArray })\n        : this.setState({ posts: [...this.state.posts, ...postArray] });\n    });\n}\n\nexport default fetchPosts;"]},"metadata":{},"sourceType":"module"}