{"ast":null,"code":"import axios from \"axios\";\nexport default function fetchPosts(state) {\n  //Requesting posts via state's API parameters.\n  const limit = state.limit,\n        offset = state.offset;\n  axios({\n    method: \"get\",\n    url: \"https://api.slstice.com/mock/posts?offset=\".concat(offset, \"&limit=\").concat(limit, \"&api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(async ({\n    data: {\n      response\n    }\n  }) => {\n    // Mapping the responses to request the /medias/ endpoint\n    const postArray = await Promise.all( // with the propper parameters, for every retrieved post.\n    response.posts.map(async post => {\n      const _ref = await axios({\n        method: \"get\",\n        url: \"https://api.slstice.com/mock/medias/\".concat(post.mediaId, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n            media = _ref.data.response.media;\n\n      const _ref2 = await axios({\n        method: \"get\",\n        url: \"https://api.slstice.com/mock/users/\".concat(media.owner.username, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n            user = _ref2.data.response.user;\n\n      media.user = user; // Saving freshly fetched media and user object into post's properties.\n\n      post.media = media;\n      return post;\n    })).catch(error => {\n      if (error.response) {\n        // The request was made and the server responded with a\n        console.log(error.response.data); // status code that falls out of the range of 2xx\n\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        //  The request was made but no response was received, `error.request`\n        //  is an instance of XMLHttpRequest in the browser and an instance\n        //  of http.ClientRequest in Node.js  \n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request and triggered an Error\n        console.log('Error', error.message);\n      }\n    }); // Assignation of the newly fetched array of posts to the component's state.\n    // If post is null, return this.setState({ posts: postArray }). Else concatenate old state with new posts.\n\n    return state.posts === null ? {\n      posts: postArray\n    } : {\n      posts: [...this.state.posts, ...postArray]\n    };\n  });\n}","map":{"version":3,"sources":["/Users/joriscarol/DEV/api-carousel/src/function.js"],"names":["axios","fetchPosts","state","limit","offset","method","url","headers","then","data","response","postArray","Promise","all","posts","map","post","mediaId","media","owner","username","user","catch","error","console","log","status","request","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACxC;AADwC,QAEhCC,KAFgC,GAEdD,KAFc,CAEhCC,KAFgC;AAAA,QAEzBC,MAFyB,GAEdF,KAFc,CAEzBE,MAFyB;AAGxCJ,EAAAA,KAAK,CAAC;AACJK,IAAAA,MAAM,EAAE,KADJ;AAEJC,IAAAA,GAAG,sDAA+CF,MAA/C,oBAA+DD,KAA/D,kCAFC;AAGJI,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHL,GAAD,CAAL,CAMGC,IANH,CAMQ,OAAO;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,GAAP,KAAkC;AAAI;AAC5C,UAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAR,EAAkB;AACxCH,IAAAA,QAAQ,CAACI,KAAT,CAAeC,GAAf,CAAmB,MAAMC,IAAN,IAAc;AAAA,mBAK3B,MAAMhB,KAAK,CAAC;AACdK,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,gDAAyCU,IAAI,CAACC,OAA9C,kCAFW;AAGdV,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHK,OAAD,CALgB;AAAA,YAGfW,KAHe,QAE7BT,IAF6B,CAG3BC,QAH2B,CAGfQ,KAHe;;AAAA,oBAgB3B,MAAMlB,KAAK,CAAC;AACdK,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,+CAAwCY,KAAK,CAACC,KAAN,CAAYC,QAApD,kCAFW;AAGdb,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHK,OAAD,CAhBgB;AAAA,YAcfc,IAde,SAa7BZ,IAb6B,CAc3BC,QAd2B,CAcfW,IAde;;AAuB/BH,MAAAA,KAAK,CAACG,IAAN,GAAaA,IAAb,CAvB+B,CAuBX;;AACpBL,MAAAA,IAAI,CAACE,KAAL,GAAaA,KAAb;AACA,aAAOF,IAAP;AACD,KA1BD,CADsB,EA4BrBM,KA5BqB,CA4BdC,KAAD,IAAW;AAChB,UAAIA,KAAK,CAACb,QAAV,EAAoB;AAAgB;AAClCc,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACb,QAAN,CAAeD,IAA3B,EADkB,CACgB;;AAClCe,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACb,QAAN,CAAegB,MAA3B;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACb,QAAN,CAAeH,OAA3B;AACD,OAJD,MAIO,IAAIgB,KAAK,CAACI,OAAV,EAAmB;AACxB;AACA;AACA;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,OAAlB;AACD,OALM,MAKA;AACL;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAAK,CAACK,OAA3B;AACD;AACF,KA1CqB,CAAxB,CADwC,CA4CxC;AACA;;AACA,WAAO1B,KAAK,CAACY,KAAN,KAAgB,IAAhB,GACF;AAAEA,MAAAA,KAAK,EAAEH;AAAT,KADE,GAEF;AAAEG,MAAAA,KAAK,EAAE,CAAC,GAAG,KAAKZ,KAAL,CAAWY,KAAf,EAAsB,GAAGH,SAAzB;AAAT,KAFL;AAGD,GAvDD;AAwDD","sourcesContent":["import axios from \"axios\";\n\nexport default function fetchPosts(state) {\n  //Requesting posts via state's API parameters.\n  const { limit, offset } = state;\n  axios({\n    method: \"get\",\n    url: `https://api.slstice.com/mock/posts?offset=${offset}&limit=${limit}&api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(async ({ data: { response } }) => {   // Mapping the responses to request the /medias/ endpoint\n    const postArray = await Promise.all(      // with the propper parameters, for every retrieved post.\n      response.posts.map(async post => {\n        const {\n          data: {\n            response: { media }\n          }\n        } = await axios({\n          method: \"get\",\n          url: `https://api.slstice.com/mock/medias/${post.mediaId}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const {\n          data: {\n            response: { user }\n          }\n        } = await axios({\n          method: \"get\",\n          url: `https://api.slstice.com/mock/users/${media.owner.username}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        media.user = user;  // Saving freshly fetched media and user object into post's properties.\n        post.media = media;\n        return post;\n      }))\n      .catch((error) => {\n        if (error.response) {               // The request was made and the server responded with a\n          console.log(error.response.data); // status code that falls out of the range of 2xx\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          //  The request was made but no response was received, `error.request`\n          //  is an instance of XMLHttpRequest in the browser and an instance\n          //  of http.ClientRequest in Node.js  \n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          console.log('Error', error.message);\n        }\n      });\n    // Assignation of the newly fetched array of posts to the component's state.\n    // If post is null, return this.setState({ posts: postArray }). Else concatenate old state with new posts.\n    return state.posts === null\n      ? ({ posts: postArray })\n      : ({ posts: [...this.state.posts, ...postArray] });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}