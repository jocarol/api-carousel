{"ast":null,"code":"var _jsxFileName = \"/Users/joriscarol/DEV/api-carousel/src/App.js\";\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport axios from \"axios\";\nimport { ReactComponent as LikeSvg } from \"@svgr/webpack?-svgo,+titleProp,+ref!./image2vector.svg\";\nimport \"animate.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      offset: 0,\n      posts: null,\n      // Post pool.\n      limit: 5,\n      // N° of posts to fetch per API call.\n      index: 0,\n      // Index of the post in the pool to render.\n      lazyOffset: 2 // Threshold value before a new API call is made\n\n    };\n  }\n\n  async fetchPosts() {\n    const _this$state = this.state,\n          limit = _this$state.limit,\n          offset = _this$state.offset; // Requesting posts via state's API parameters.\n\n    axios({\n      method: \"get\",\n      url: \"https://api.slstice.com/mock/posts?offset=\".concat(offset, \"&limit=\").concat(limit, \"&api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(async ({\n      data: {\n        response\n      }\n    }) => {\n      const postArray = await Promise.all( // Mapping the responses to request the /medias/ endpoint\n      response.posts.map(async post => {\n        // with the propper parameters, for every retrieved post.\n        const _ref = await axios({\n          method: \"get\",\n          url: \"https://api.slstice.com/mock/medias/\".concat(post.mediaId, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }),\n              media = _ref.data.response.media;\n\n        const _ref2 = await axios({\n          method: \"get\",\n          url: \"https://api.slstice.com/mock/users/\".concat(media.owner.username, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }),\n              user = _ref2.data.response.user;\n\n        post.media = media; // Saving freshly fetched media and user object into post's properties.\n\n        media.user = user;\n        return post;\n      }));\n      return this.state.posts === null // Assignation of the newly fetched array of posts to the component's state.\n      ? this.setState({\n        posts: postArray\n      }) // If post is null, return this.setState({ posts: postArray }).\n      : this.setState({\n        posts: [...this.state.posts, ...postArray]\n      }); // Else concatenate old state with new posts.\n    });\n  } // The state loader is builded as a method that will handle :\n  // I   - The lazy loading of the API requests.\n  // II  - The cyclcling through API fetched posts.\n  // III - The resulting compoponent's state assignation.\n\n\n  async stateLoader() {\n    if ( // If the post pool is empty, or if theres no more post to render, minus the lazy offset trigger,\n    this.state.posts === null || // Assign the correct value to the offset parameter, then fetch new posts.\n    this.state.index >= this.state.posts.length - 1 - this.state.lazyOffset) {\n      return this.setState({\n        offset: this.state.index,\n        index: this.state.index + 1\n      }, () => this.fetchPosts());\n    }\n\n    this.setState({\n      index: this.state.index + 1 // Trigerring the render of the new post by a setChange()\n\n    }); // of the incremented post pool index.\n  }\n\n  componentDidMount() {\n    this.stateLoader(); // Call upon component mounting.\n\n    setInterval(() => {\n      this.stateLoader(); // Timer regulating the call to the stateLoader() method.\n    }, 6000);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          posts = _this$state2.posts,\n          index = _this$state2.index;\n    if (!posts) // Rendering a spinner while there is no post to consume.\n      return React.createElement(\"div\", {\n        className: \"loaderContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }));\n    const mediaUrl = posts[index].media.urls.regular; // Assignation of the var needed\n\n    const avatar = posts[index].media.user.profile_images.medium || \"\"; // for string interpolation.\n\n    const likeCount = posts[index].media.statistics.likes || \"0\";\n    const personnePersonnes = likeCount < 2 ? \"personne\" : \"personnes\";\n    const lastName = posts[index].media.user.last_name || \"\";\n    const firstName = posts[index].media.user.first_name || \"\";\n    const title = posts[index].title || \"Sans Titre\";\n    const description = posts[index].description || \"Sans déscriptions\";\n    const timeElapsed = moment(posts[index].media.statistics.created).format(\"D\") || \"\";\n    const jourJours = timeElapsed < 2 ? \"jour\" : \"jours\";\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"card \" + this.state.classAnim,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 7,\n      md: 7,\n      xl: 7,\n      xs: 7,\n      className: \"gridPicWrapper\",\n      style: {\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: \"100%\"\n      },\n      title: \"lorem ipsum\",\n      src: mediaUrl,\n      className: \"media\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(CardMedia, {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      title: \"lorem ipsum\",\n      image: mediaUrl,\n      className: \"canvaPic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      lg: 5,\n      md: 5,\n      xl: 5,\n      xs: 5,\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      action: React.createElement(\"div\", {\n        className: \"actionWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"\".concat(lastName, \" \").concat(firstName)), React.createElement(Avatar, {\n        className: \"avatar\",\n        src: avatar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      className: \"vAlign\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, title)), React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, description)), React.createElement(CardActions, {\n      disableSpacing: true,\n      className: \"like\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-label\": \"Like the slide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(LikeSvg, {\n      height: \"25px\",\n      width: \"25px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, likeCount, \" \", personnePersonnes)), React.createElement(Typography, {\n      className: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Il y a \", timeElapsed, \" \", jourJours)))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/joriscarol/DEV/api-carousel/src/App.js"],"names":["React","Component","moment","CircularProgress","Card","CardActions","CardContent","Grid","Typography","CardHeader","Avatar","IconButton","CardMedia","axios","App","constructor","props","state","offset","posts","limit","index","lazyOffset","fetchPosts","method","url","headers","then","data","response","postArray","Promise","all","map","post","mediaId","media","owner","username","user","setState","stateLoader","length","componentDidMount","setInterval","render","mediaUrl","urls","regular","avatar","profile_images","medium","likeCount","statistics","likes","personnePersonnes","lastName","last_name","firstName","first_name","title","description","timeElapsed","created","format","jourJours","classAnim","overflow","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport axios from \"axios\";\nimport { ReactComponent as LikeSvg } from \"./image2vector.svg\";\n\nimport \"animate.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      offset: 0,\n      posts: null,    // Post pool.\n      limit: 5,       // N° of posts to fetch per API call.\n      index: 0,       // Index of the post in the pool to render.\n      lazyOffset: 2   // Threshold value before a new API call is made\n    };\n  }\n\n  async fetchPosts() {\n    const { limit, offset } = this.state; // Requesting posts via state's API parameters.\n\n    axios({\n      method: \"get\",\n      url: `https://api.slstice.com/mock/posts?offset=${offset}&limit=${limit}&api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(async ({ data: { response } }) => {\n      const postArray = await Promise.all(   // Mapping the responses to request the /medias/ endpoint\n        response.posts.map(async post => {   // with the propper parameters, for every retrieved post.\n          const {\n            data: {\n              response: { media }\n            }\n          } = await axios({\n            method: \"get\",\n            url: `https://api.slstice.com/mock/medias/${post.mediaId}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const {\n            data: {\n              response: { user }\n            }\n          } = await axios({\n            method: \"get\",\n            url: `https://api.slstice.com/mock/users/${media.owner.username}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          post.media = media;  // Saving freshly fetched media and user object into post's properties.\n          media.user = user;\n          return post;\n        })\n      );\n      \n      return this.state.posts === null                                    // Assignation of the newly fetched array of posts to the component's state.\n        ? this.setState({ posts: postArray })                             // If post is null, return this.setState({ posts: postArray }).\n        : this.setState({ posts: [...this.state.posts, ...postArray] });  // Else concatenate old state with new posts.\n    });\n  }\n\n  // The state loader is builded as a method that will handle :\n  // I   - The lazy loading of the API requests.\n  // II  - The cyclcling through API fetched posts.\n  // III - The resulting compoponent's state assignation.\n  async stateLoader() {\n    if (                           // If the post pool is empty, or if theres no more post to render, minus the lazy offset trigger,\n      this.state.posts === null || // Assign the correct value to the offset parameter, then fetch new posts.\n      this.state.index >= this.state.posts.length - 1 - this.state.lazyOffset\n    ) {\n      return this.setState({ offset: this.state.index, index: this.state.index + 1}, () =>\n        this.fetchPosts()\n      );\n    }\n    this.setState({\n      index: this.state.index + 1   // Trigerring the render of the new post by a setChange()\n    });                             // of the incremented post pool index.\n  }\n\n  componentDidMount() {\n    this.stateLoader();   // Call upon component mounting.\n    setInterval(() => {\n      this.stateLoader(); // Timer regulating the call to the stateLoader() method.\n    }, 6000);\n  }\n\n  render() {\n    const { posts, index } = this.state;\n\n    if (!posts) // Rendering a spinner while there is no post to consume.\n      return (\n        <div className=\"loaderContainer\">\n          <CircularProgress />\n        </div>\n      );\n\n    const mediaUrl = posts[index].media.urls.regular;                   // Assignation of the var needed\n    const avatar = posts[index].media.user.profile_images.medium || \"\"; // for string interpolation.\n    const likeCount = posts[index].media.statistics.likes || \"0\";\n    const personnePersonnes = likeCount < 2 ? \"personne\" : \"personnes\";\n    const lastName = posts[index].media.user.last_name || \"\";\n    const firstName = posts[index].media.user.first_name || \"\";\n    const title = posts[index].title || \"Sans Titre\";\n    const description = posts[index].description || \"Sans déscriptions\";\n    const timeElapsed =\n      moment(posts[index].media.statistics.created).format(\"D\") || \"\";\n    const jourJours = timeElapsed < 2 ? \"jour\" : \"jours\";\n\n    return (\n      <div className=\"App\">\n        <Card className={\"card \" + this.state.classAnim}>\n          <Grid container spacing={0} direction=\"row\">\n            <Grid\n              item\n              lg={7}\n              md={7}\n              xl={7}\n              xs={7}\n              className=\"gridPicWrapper\"\n              style={{ overflow: \"hidden\" }}\n            >\n              <img\n                style={{ width: \"100%\" }}\n                title=\"lorem ipsum\"\n                src={mediaUrl}\n                className=\"media\"\n                alt=\"\"\n              />\n              <CardMedia\n                style={{ width: \"100%\", height: \"100%\" }}\n                title=\"lorem ipsum\"\n                image={mediaUrl}\n                className=\"canvaPic\"\n              />\n            </Grid>\n            <Grid item lg={5} md={5} xl={5} xs={5} className=\"grid\">\n              <CardHeader\n                action={\n                  <div className=\"actionWrapper\">\n                    <Typography className=\"name\">\n                      {`${lastName} ${firstName}`}\n                    </Typography>\n                    <Avatar className=\"avatar\" src={avatar} />\n                  </div>\n                }\n              />\n              <CardContent className=\"vAlign\">\n                <Typography variant=\"h4\" color=\"textSecondary\">\n                  <b>{title}</b>\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n                  {description}\n                </Typography>\n              </CardContent>\n              <CardActions disableSpacing className=\"like\">\n                <IconButton aria-label=\"Like the slide\">\n                  <LikeSvg height=\"25px\" width=\"25px\" />\n                </IconButton>\n                <Typography>\n                  {likeCount} {personnePersonnes}\n                </Typography>\n              </CardActions>\n              <Typography className=\"date\">\n                Il y a {timeElapsed} {jourJours}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}