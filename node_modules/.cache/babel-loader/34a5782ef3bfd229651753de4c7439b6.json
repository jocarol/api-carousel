{"ast":null,"code":"var _jsxFileName = \"/Users/joriscarol/DEV/api-carousel/src/App.js\";\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport { ReactComponent as LikeSvg } from \"@svgr/webpack?-svgo,+titleProp,+ref!./image2vector.svg\";\nimport { fetchPosts } from \"/src/function.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      offset: 0,\n      posts: null,\n      // Post pool\n      limit: 7,\n      // N° of posts to fetch per API call \n      index: 0,\n      // Index of the post in the pool to render\n      lazyOffset: 4 // Threshold value before a new API call is made\n\n    };\n  }\n\n  statePostHandler() {\n    const newPosts = fetchPosts(this.state);\n    this.setState({\n      posts: newPosts\n    });\n  } // The state loader is builded as a method that will handle :\n  // I   - The lazy loading of the API requests.\n  // II  - The cyclcling through API fetched posts.\n  // III - The resulting compoponent's state assignation.\n\n\n  async stateLoader() {\n    // If the post pool is empty, or if theres no more post to render, minus the lazy offset trigger : \n    // Assign the correct value to the offset parameter, then fetch\n    if (this.state.posts === null || this.state.index >= this.state.posts.length - 1 - this.state.lazyOffset) {\n      // Thus we need to load the posts in the component's state. At this point in any cases,\n      // states have been properly updated.\n      return this.setState({\n        offset: this.state.index\n      }, () => this.fetchPosts());\n    } // Gérer si la requete la requete dit y'a plus de post en db a ce moment index = 0\n\n\n    this.setState({\n      index: this.state.index + 1\n    });\n  }\n\n  componentDidMount() {\n    this.stateLoader(); // Call upon component mounting.\n\n    setInterval(() => {\n      // Timer regulating the call to the stateLoader() method.\n      this.stateLoader();\n    }, 6000);\n  }\n\n  render() {\n    const _this$state = this.state,\n          posts = _this$state.posts,\n          index = _this$state.index;\n    if (!posts) // Rendering a spinner while there is no post to consume.\n      return React.createElement(\"div\", {\n        className: \"loaderContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    const mediaUrl = posts[index].media.urls.regular; // Assignation of the var needed\n\n    const avatar = posts[index].media.user.profile_images.medium || \"\"; // for string interpolation.\n\n    const likeCount = posts[index].media.statistics.likes || \"0\";\n    const personnePersonnes = likeCount < 2 ? \"personne\" : \"personnes\";\n    const lastName = posts[index].media.user.last_name || \"\";\n    const firstName = posts[index].media.user.first_name || \"\";\n    const title = posts[index].title || \"Sans Titre\";\n    const description = posts[index].description || \"Sans déscriptions\";\n    const timeElapsed = moment(posts[index].media.statistics.created).format(\"D\") || \"\";\n    const jourJours = timeElapsed < 2 ? \"jour\" : \"jours\";\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"card \" + this.state.classAnim,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 7,\n      md: 7,\n      xl: 7,\n      xs: 7,\n      className: \"gridPicWrapper\",\n      style: {\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: \"100%\"\n      },\n      title: \"lorem ipsum\",\n      src: mediaUrl,\n      className: \"media\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(CardMedia, {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      title: \"lorem ipsum\",\n      image: mediaUrl,\n      className: \"canvaPic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      lg: 5,\n      md: 5,\n      xl: 5,\n      xs: 5,\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      action: React.createElement(\"div\", {\n        className: \"actionWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"\".concat(lastName, \" \").concat(firstName)), React.createElement(Avatar, {\n        className: \"avatar\",\n        src: avatar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      className: \"vAlign\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, title)), React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, description)), React.createElement(CardActions, {\n      disableSpacing: true,\n      className: \"like\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-label\": \"Like the slide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(LikeSvg, {\n      height: \"25px\",\n      width: \"25px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, likeCount, \" \", personnePersonnes)), React.createElement(Typography, {\n      className: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Il y a \", timeElapsed, \" \", jourJours)))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/joriscarol/DEV/api-carousel/src/App.js"],"names":["React","Component","moment","CircularProgress","Card","CardActions","CardContent","Grid","Typography","CardHeader","Avatar","IconButton","CardMedia","fetchPosts","App","constructor","props","state","offset","posts","limit","index","lazyOffset","statePostHandler","newPosts","setState","stateLoader","length","componentDidMount","setInterval","render","mediaUrl","media","urls","regular","avatar","user","profile_images","medium","likeCount","statistics","likes","personnePersonnes","lastName","last_name","firstName","first_name","title","description","timeElapsed","created","format","jourJours","classAnim","overflow","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport { ReactComponent as LikeSvg } from \"./image2vector.svg\";\nimport {fetchPosts} from \"/src/function.js\"\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      offset: 0,  \n      posts: null,   // Post pool\n      limit: 7,      // N° of posts to fetch per API call \n      index: 0,      // Index of the post in the pool to render\n      lazyOffset : 4 // Threshold value before a new API call is made\n    };\n  }\n\n  statePostHandler(){\n    const newPosts = fetchPosts(this.state);\n    this.setState({posts : newPosts})  ;\n  }\n\n\n  // The state loader is builded as a method that will handle :\n  // I   - The lazy loading of the API requests.\n  // II  - The cyclcling through API fetched posts.\n  // III - The resulting compoponent's state assignation.\n  async stateLoader() {\n    // If the post pool is empty, or if theres no more post to render, minus the lazy offset trigger : \n    // Assign the correct value to the offset parameter, then fetch\n    if (this.state.posts === null || this.state.index >= (this.state.posts.length - 1) - this.state.lazyOffset) {\n      // Thus we need to load the posts in the component's state. At this point in any cases,\n      // states have been properly updated.\n      return this.setState({ offset: this.state.index }, () => this.fetchPosts());\n    }\n    \n    // Gérer si la requete la requete dit y'a plus de post en db a ce moment index = 0\n    this.setState({\n      index: this.state.index + 1,\n    });\n}\n\n  componentDidMount() {\n    this.stateLoader();   // Call upon component mounting.\n    setInterval(() => {\n    // Timer regulating the call to the stateLoader() method.\n      this.stateLoader();\n    },6000);\n  }\n  \n  render() {\n    const { posts, index } = this.state;\n\n    if (!posts)   // Rendering a spinner while there is no post to consume.\n      return (\n        <div className=\"loaderContainer\">\n          <CircularProgress />\n        </div>\n      );\n\n    const mediaUrl = posts[index].media.urls.regular;                     // Assignation of the var needed\n    const avatar = posts[index].media.user.profile_images.medium || \"\";   // for string interpolation.\n    const likeCount = posts[index].media.statistics.likes || \"0\";\n    const personnePersonnes = likeCount < 2 ? \"personne\" : \"personnes\";\n    const lastName = posts[index].media.user.last_name || \"\";\n    const firstName = posts[index].media.user.first_name || \"\";\n    const title = posts[index].title || \"Sans Titre\";\n    const description = posts[index].description || \"Sans déscriptions\";\n    const timeElapsed = moment(posts[index].media.statistics.created).format(\"D\") || \"\";\n    const jourJours = timeElapsed < 2 ? \"jour\" : \"jours\";\n\n    return (\n      <div className=\"App\">\n        <Card className={\"card \" + this.state.classAnim}>\n          <Grid\n            container\n            spacing={0}\n            direction=\"row\"\n          >\n            <Grid\n              item\n              lg={7}\n              md={7}\n              xl={7}\n              xs={7}\n              className=\"gridPicWrapper\"\n              style={{ overflow: \"hidden\" }}\n            >\n              <img\n                style={{ width: \"100%\" }}\n                title=\"lorem ipsum\"\n                src={mediaUrl}\n                className=\"media\"\n                alt=\"\"\n              />\n              <CardMedia\n                style={{ width: \"100%\", height: \"100%\" }}\n                title=\"lorem ipsum\"\n                image={mediaUrl}\n                className=\"canvaPic\"\n              />\n            </Grid>\n            <Grid item lg={5} md={5} xl={5} xs={5} className=\"grid\">\n              <CardHeader\n                action={\n                  <div className=\"actionWrapper\">\n                    <Typography className=\"name\">\n                      {`${lastName} ${firstName}`}\n                    </Typography>\n                    <Avatar className=\"avatar\" src={avatar} />\n                  </div>\n                }\n              />\n              <CardContent className=\"vAlign\">\n                <Typography variant=\"h4\" color=\"textSecondary\">\n                  <b>{title}</b>\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n                  {description}\n                </Typography>\n              </CardContent>\n              <CardActions disableSpacing className=\"like\">\n                <IconButton aria-label=\"Like the slide\">\n                  <LikeSvg height=\"25px\" width=\"25px\" />\n                </IconButton>\n                <Typography>\n                  {likeCount} {personnePersonnes}\n                </Typography>\n              </CardActions>\n              <Typography className=\"date\">\n                Il y a {timeElapsed} {jourJours}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}