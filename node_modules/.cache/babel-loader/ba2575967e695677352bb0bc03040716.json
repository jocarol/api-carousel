{"ast":null,"code":"import axios from \"axios\";\nimport React from \"react\";\n\nconst fetchPosts = async state => {\n  //Requesting posts via state's API parameters.\n  const offset = state.offset,\n        limit = state.limit;\n  axios({\n    method: \"get\",\n    url: \"https://api.slstice.com/mock/posts?offset=\".concat(offset, \"&limit=\").concat(limit, \"&api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(async ({\n    data: {\n      response\n    }\n  }) => {\n    // Mapping the responses to request the /medias/ endpoint\n    const postArray = await Promise.all( // with the propper parameters, for every retrieved post.\n    response.posts.map(async post => {\n      const _ref = await axios({\n        method: \"get\",\n        url: \"https://api.slstice.com/mock/medias/\".concat(post.mediaId, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n            media = _ref.data.response.media;\n\n      const _ref2 = await axios({\n        method: \"get\",\n        url: \"https://api.slstice.com/mock/users/\".concat(media.owner.username, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }),\n            user = _ref2.data.response.user; // Saving freshly fetched media and user object into post's properties.\n\n\n      post.media = media;\n      media.user = user;\n      return post;\n    })); // Assignation of the newly fetched array of posts to the component's state.\n    // If post is null, return this.setState({ posts: postArray }). Else concatenate old state with new posts.\n\n    return state.posts === null ? this.React.setState({\n      posts: postArray\n    }) : this.React.setState({\n      posts: [...state.posts, ...postArray]\n    });\n  });\n};\n\nexport default fetchPosts;","map":{"version":3,"sources":["/Users/joriscarol/DEV/api-carousel/src/function.js"],"names":["axios","React","fetchPosts","state","offset","limit","method","url","headers","then","data","response","postArray","Promise","all","posts","map","post","mediaId","media","owner","username","user","setState"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;AAClC;AADkC,QAE3BC,MAF2B,GAEVD,KAFU,CAE3BC,MAF2B;AAAA,QAEnBC,KAFmB,GAEVF,KAFU,CAEnBE,KAFmB;AAIlCL,EAAAA,KAAK,CAAC;AACJM,IAAAA,MAAM,EAAE,KADJ;AAEJC,IAAAA,GAAG,sDAA+CH,MAA/C,oBAA+DC,KAA/D,kCAFC;AAGJG,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHL,GAAD,CAAL,CAMGC,IANH,CAMQ,OAAO;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAAR,GAAP,KAAkC;AAAI;AAC1C,UAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAR,EAAkB;AACxCH,IAAAA,QAAQ,CAACI,KAAT,CAAeC,GAAf,CAAmB,MAAMC,IAAN,IAAc;AAAA,mBAK3B,MAAMjB,KAAK,CAAC;AACdM,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,gDAAyCU,IAAI,CAACC,OAA9C,kCAFW;AAGdV,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHK,OAAD,CALgB;AAAA,YAGfW,KAHe,QAE7BT,IAF6B,CAG3BC,QAH2B,CAGfQ,KAHe;;AAAA,oBAgB3B,MAAMnB,KAAK,CAAC;AACdM,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,+CAAwCY,KAAK,CAACC,KAAN,CAAYC,QAApD,kCAFW;AAGdb,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHK,OAAD,CAhBgB;AAAA,YAcfc,IAde,SAa7BZ,IAb6B,CAc3BC,QAd2B,CAcfW,IAde,EAuB/B;;;AACAL,MAAAA,IAAI,CAACE,KAAL,GAAaA,KAAb;AACAA,MAAAA,KAAK,CAACG,IAAN,GAAaA,IAAb;AACA,aAAOL,IAAP;AACD,KA3BD,CADsB,CAAxB,CADsC,CA+BtC;AACA;;AACA,WAAOd,KAAK,CAACY,KAAN,KAAgB,IAAhB,GACH,KAAKd,KAAL,CAAWsB,QAAX,CAAoB;AAAER,MAAAA,KAAK,EAAEH;AAAT,KAApB,CADG,GAEH,KAAKX,KAAL,CAAWsB,QAAX,CAAoB;AAAER,MAAAA,KAAK,EAAE,CAAC,GAAGZ,KAAK,CAACY,KAAV,EAAiB,GAAGH,SAApB;AAAT,KAApB,CAFJ;AAGD,GA1CH;AA2CD,CA/CD;;AAiDA,eAAeV,UAAf","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\n\nconst fetchPosts = async (state) => {\n  //Requesting posts via state's API parameters.\n  const {offset, limit} = state;\n\n  axios({\n    method: \"get\",\n    url: `https://api.slstice.com/mock/posts?offset=${offset}&limit=${limit}&api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(async ({ data: { response } }) => {   // Mapping the responses to request the /medias/ endpoint\n      const postArray = await Promise.all(      // with the propper parameters, for every retrieved post.\n        response.posts.map(async post => {\n          const {\n            data: {\n              response: { media }\n            }\n          } = await axios({\n            method: \"get\",\n            url: `https://api.slstice.com/mock/medias/${post.mediaId}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const {\n            data: {\n              response: { user }\n            }\n          } = await axios({\n            method: \"get\",\n            url: `https://api.slstice.com/mock/users/${media.owner.username}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          // Saving freshly fetched media and user object into post's properties.\n          post.media = media;\n          media.user = user;\n          return post;\n        })\n      );\n      // Assignation of the newly fetched array of posts to the component's state.\n      // If post is null, return this.setState({ posts: postArray }). Else concatenate old state with new posts.\n      return state.posts === null\n        ? this.React.setState({ posts: postArray })\n        : this.React.setState({ posts: [...state.posts, ...postArray] });\n    });\n}\n\nexport default fetchPosts;"]},"metadata":{},"sourceType":"module"}