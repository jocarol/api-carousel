{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _react = require('react');\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _addClass = require('dom-helpers/class/addClass');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('dom-helpers/class/removeClass');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _proptypes = require('proptypes');\n\nvar _proptypes2 = _interopRequireDefault(_proptypes);\n\nvar _React16TransitionEvents = require('./React16TransitionEvents');\n\nvar _React16TransitionEvents2 = _interopRequireDefault(_React16TransitionEvents);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TICK = 17;\nvar CSSTransitionGroupChild = (0, _createReactClass2.default)({\n  displayName: 'CSSTransitionGroupChild',\n  propTypes: {\n    name: _proptypes2.default.oneOfType([_proptypes2.default.string, _proptypes2.default.shape({\n      enter: _proptypes2.default.string,\n      change: _proptypes2.default.string,\n      leave: _proptypes2.default.string,\n      active: _proptypes2.default.string\n    }), _proptypes2.default.shape({\n      enter: _proptypes2.default.string,\n      enterActive: _proptypes2.default.string,\n      change: _proptypes2.default.string,\n      changeActive: _proptypes2.default.string,\n      leave: _proptypes2.default.string,\n      leaveActive: _proptypes2.default.string,\n      appear: _proptypes2.default.string,\n      appearActive: _proptypes2.default.string\n    })]).isRequired,\n    // Once we require timeouts to be specified, we can remove the\n    // boolean flags (appear etc.) and just accept a number\n    // or a bool for the timeout flags (appearTimeout etc.)\n    appear: _proptypes2.default.bool,\n    enter: _proptypes2.default.bool,\n    change: _proptypes2.default.bool,\n    leave: _proptypes2.default.bool,\n    appearTimeout: _proptypes2.default.number,\n    changeTimeout: _proptypes2.default.number,\n    enterTimeout: _proptypes2.default.number,\n    leaveTimeout: _proptypes2.default.number\n  },\n  transition: function transition(animationType, finishCallback, userSpecifiedDelay) {\n    var node = (0, _reactDom.findDOMNode)(this);\n\n    if (!node || !this.props.animate) {\n      if (finishCallback) {\n        finishCallback();\n      }\n\n      return;\n    }\n\n    var className = this.props.name[animationType] || this.props.name + '-' + animationType;\n    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';\n    var timeout = null;\n\n    var endListener = function endListener(e) {\n      if (e && e.target !== node) {\n        return;\n      }\n\n      clearTimeout(timeout);\n      (0, _removeClass2.default)(node, className);\n      (0, _removeClass2.default)(node, activeClassName);\n\n      _React16TransitionEvents2.default.removeEndEventListener(node, endListener); // Usually this optional callback is used for informing an owner of\n      // a leave animation and telling it to remove the child.\n\n\n      if (finishCallback) {\n        finishCallback();\n      }\n    };\n\n    (0, _addClass2.default)(node, className); // Need to do this to actually trigger a transition.\n\n    this.queueClass(activeClassName); // If the user specified a timeout delay.\n\n    if (userSpecifiedDelay) {\n      // Clean-up the animation after the specified delay\n      timeout = setTimeout(endListener, userSpecifiedDelay);\n      this.transitionTimeouts.push(timeout);\n    } else {\n      _React16TransitionEvents2.default.addEndEventListener(node, endListener);\n    }\n  },\n  queueClass: function queueClass(className) {\n    this.classNameQueue.push(className);\n\n    if (!this.timeout) {\n      this.timeout = setTimeout(this.flushClassNameQueue, TICK);\n    }\n  },\n  flushClassNameQueue: function flushClassNameQueue() {\n    if (!this.unmounted) {\n      this.classNameQueue.forEach(_addClass2.default.bind(_addClass2.default, (0, _reactDom.findDOMNode)(this)));\n    }\n\n    this.classNameQueue.length = 0;\n    this.timeout = null;\n  },\n  componentWillMount: function componentWillMount() {\n    this.classNameQueue = [];\n    this.transitionTimeouts = [];\n  },\n  componentWillUpdate: function componentWillUpdate() {\n    if (this.props.change && this.props.animateChangeIf) {\n      this.transition('change', null, this.props.changeTimeout);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    this.transitionTimeouts.forEach(function (timeout) {\n      clearTimeout(timeout);\n    });\n  },\n  componentWillAppear: function componentWillAppear(done) {\n    if (this.props.appear) {\n      this.transition('appear', done, this.props.appearTimeout);\n    } else {\n      done();\n    }\n  },\n  componentWillEnter: function componentWillEnter(done) {\n    if (this.props.enter) {\n      this.transition('enter', done, this.props.enterTimeout);\n    } else {\n      done();\n    }\n  },\n  componentWillLeave: function componentWillLeave(done) {\n    if (this.props.leave) {\n      this.transition('leave', done, this.props.leaveTimeout);\n    } else {\n      done();\n    }\n  },\n  render: function render() {\n    return Array.isArray(this.props.children) ? this.props.children[0] : this.props.children;\n  }\n});\nexports.default = CSSTransitionGroupChild;","map":null,"metadata":{},"sourceType":"script"}