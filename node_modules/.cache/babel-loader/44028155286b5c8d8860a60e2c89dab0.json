{"ast":null,"code":"var _jsxFileName = \"/Users/joriscarol/DEV/api-carousel/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport { ReactComponent as LikeSvg } from \"@svgr/webpack?-svgo,+titleProp,+ref!./image2vector.svg\";\nimport \"animate.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // State initialization\n\n    this.state = {\n      offset: 0,\n      posts: null,\n      limit: 3,\n      index: 0,\n      // post index\n      lazyOffset: 5\n    };\n  }\n\n  async fetchPosts() {\n    const _this$state = this.state,\n          limit = _this$state.limit,\n          offset = _this$state.offset; // Requesting posts to render via state\"s API parameters.\n\n    axios({\n      method: \"get\",\n      url: \"https://api.slstice.com/mock/posts?offset=\".concat(offset, \"&limit=\").concat(limit, \"&api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }) // Mapping the responses to request the /medias/ endpoint,\n    // with the propper parameters, for every retrieved post :\n    .then(async ({\n      data: {\n        response\n      }\n    }) => {\n      const postArray = await Promise.all(response.posts.map(async post => {\n        const _ref = await axios({\n          method: \"get\",\n          url: \"https://api.slstice.com/mock/medias/\".concat(post.mediaId, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }),\n              media = _ref.data.response.media;\n\n        const _ref2 = await axios({\n          method: \"get\",\n          url: \"https://api.slstice.com/mock/users/\".concat(media.owner.username, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }),\n              user = _ref2.data.response.user; // Saving freshly fetched media and user object into post\"s properties:\n\n\n        media.user = user;\n        post.media = media;\n        if (user === undefined || media === undefined) this.setState({\n          index: this.state.index - 1\n        });\n        return post;\n      })); // Assignation of the newly fetched array of posts to the component\"s state.\n      // If post is null return this.setState({ posts: postArray }), else concatenate old state with new posts:\n\n      return this.state.posts === null ? this.setState({\n        posts: postArray\n      }) : this.setState({\n        posts: [...this.state.posts, ...postArray]\n      });\n    });\n  } // The state loader is builded as a parameterless method that will handle :\n  // I   - The pooling of the API requests.\n  // III - The cyclcling through API fetched posts.\n  // II  - The resulting compoponent\"s state assignation.\n\n\n  async stateLoader() {\n    //  Evaluating the possibility of post iteration.\n    //  If it's possible, then incrementing the state's post index and returning:\n    // If it's not possible to iterate, evaluate if there is no more posts to render.\n    // If so, assigning the index value to offset in the component's state for the upcoming request,\n    if (this.state.posts !== null && this.state.index >= this.state.posts.length - 1 - 5) {\n      this.setState({\n        offset: this.state.index,\n        index: this.state.index + 1\n      });\n    } //if (this.state.posts !== null && this.state.index < this.state.posts.length - 1) {\n    else if (this.state.posts !== null) {\n        this.setState({\n          index: this.state.index + 1\n        });\n        return;\n      } // If no previous conditions have been met, it means that state.post is null.\n    // Thus we need to load the posts in the component\"s state. At this point in any cases,\n    // state have been properly updated.\n\n\n    this.fetchPosts();\n  } // Timer regulating the call to the stateLoader() method\n\n\n  componentDidMount() {\n    // Call upon component mounting\n    this.stateLoader();\n    setInterval(() => {\n      this.stateLoader();\n    }, 6000);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          posts = _this$state2.posts,\n          index = _this$state2.index; // Rendering a spinner while there is no post to consume.\n\n    if (!posts) return React.createElement(\"div\", {\n      className: \"loaderContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })); // Assignation of the var needed in the custom template\n    // for string interpolation\n\n    const mediaUrl = posts[index].media.urls.regular;\n    const avatar = posts[index].media.user.profile_images.medium || \"\";\n    const likeCount = posts[index].media.statistics.likes || \"0\";\n    const personnePersonnes = likeCount < 2 ? \"personne\" : \"personnes\";\n    const lastName = posts[index].media.user.last_name || \"\";\n    const firstName = posts[index].media.user.first_name || \"\";\n    const title = posts[index].title || \"Sans Titre\";\n    const description = posts[index].description || \"Sans dÃ©scriptions\";\n    const timeElapsed = moment(posts[index].media.statistics.created).format(\"D\") || \"\";\n    const jourJours = timeElapsed < 2 ? \"jour\" : \"jours\";\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"card animated fadeInRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"row\",\n      style: {\n        height: \"100vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 7,\n      md: 7,\n      xl: 7,\n      xs: 7,\n      className: \"gridPicWrapper\",\n      style: {\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: \"100%\"\n      },\n      title: \"lorem ipsum\",\n      src: mediaUrl,\n      className: \"media\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(CardMedia, {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      title: \"lorem ipsum\",\n      image: mediaUrl,\n      className: \"canvaPic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      lg: 5,\n      md: 5,\n      xl: 5,\n      xs: 5,\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      action: React.createElement(\"div\", {\n        className: \"actionWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"\".concat(lastName, \" \").concat(firstName)), React.createElement(Avatar, {\n        className: \"avatar\",\n        src: avatar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      className: \"vAlign\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, title)), React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, description)), React.createElement(CardActions, {\n      disableSpacing: true,\n      className: \"like\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-label\": \"Like the slide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(LikeSvg, {\n      height: \"25px\",\n      width: \"25px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, likeCount, \" \", personnePersonnes)), React.createElement(Typography, {\n      className: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Il y a \", timeElapsed, \" \", jourJours)))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/joriscarol/DEV/api-carousel/src/App.js"],"names":["React","Component","axios","moment","CircularProgress","Card","CardActions","CardContent","Grid","Typography","CardHeader","Avatar","IconButton","CardMedia","App","constructor","props","state","offset","posts","limit","index","lazyOffset","fetchPosts","method","url","headers","then","data","response","postArray","Promise","all","map","post","mediaId","media","owner","username","user","undefined","setState","stateLoader","length","componentDidMount","setInterval","render","mediaUrl","urls","regular","avatar","profile_images","medium","likeCount","statistics","likes","personnePersonnes","lastName","last_name","firstName","first_name","title","description","timeElapsed","created","format","jourJours","height","overflow","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport { ReactComponent as LikeSvg } from \"./image2vector.svg\";\n\nimport \"animate.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // State initialization\n    this.state = {\n      offset: 0,\n      posts: null,\n      limit: 3,\n      index: 0, // post index\n      lazyOffset: 5\n    };\n  }\n\n  async fetchPosts() {\n    const { limit, offset } = this.state;\n    // Requesting posts to render via state\"s API parameters.\n\n    axios({\n      method: \"get\",\n      url: `https://api.slstice.com/mock/posts?offset=${offset}&limit=${limit}&api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      // Mapping the responses to request the /medias/ endpoint,\n      // with the propper parameters, for every retrieved post :\n      .then(async ({ data: { response } }) => {\n        const postArray = await Promise.all(\n          response.posts.map(async post => {\n            const {\n              data: {\n                response: { media }\n              }\n            } = await axios({\n              method: \"get\",\n              url: `https://api.slstice.com/mock/medias/${post.mediaId}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n            const {\n              data: {\n                response: { user }\n              }\n            } = await axios({\n              method: \"get\",\n              url: `https://api.slstice.com/mock/users/${media.owner.username}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n            // Saving freshly fetched media and user object into post\"s properties:\n            media.user = user;\n            post.media = media;\n            if (user === undefined || media === undefined)\n              this.setState({ index: this.state.index - 1 });\n            return post;\n          })\n        );\n        // Assignation of the newly fetched array of posts to the component\"s state.\n        // If post is null return this.setState({ posts: postArray }), else concatenate old state with new posts:\n        return this.state.posts === null\n          ? this.setState({ posts: postArray })\n          : this.setState({ posts: [...this.state.posts, ...postArray] });\n      });\n  }\n\n  // The state loader is builded as a parameterless method that will handle :\n  // I   - The pooling of the API requests.\n  // III - The cyclcling through API fetched posts.\n  // II  - The resulting compoponent\"s state assignation.\n  async stateLoader() {\n    //  Evaluating the possibility of post iteration.\n    //  If it's possible, then incrementing the state's post index and returning:\n    // If it's not possible to iterate, evaluate if there is no more posts to render.\n    // If so, assigning the index value to offset in the component's state for the upcoming request,\n    if (\n      this.state.posts !== null &&\n      this.state.index >= this.state.posts.length - 1 - 5\n    ) {\n      this.setState({\n        offset: this.state.index,\n        index: this.state.index + 1\n      });\n    }\n    //if (this.state.posts !== null && this.state.index < this.state.posts.length - 1) {\n    else if (this.state.posts !== null) {\n      this.setState({ index: this.state.index + 1 });\n      return;\n    }\n    // If no previous conditions have been met, it means that state.post is null.\n    // Thus we need to load the posts in the component\"s state. At this point in any cases,\n    // state have been properly updated.\n    this.fetchPosts();\n  }\n\n  // Timer regulating the call to the stateLoader() method\n  componentDidMount() {\n    // Call upon component mounting\n    this.stateLoader();\n    setInterval(() => {\n      this.stateLoader();\n    }, 6000);\n  }\n\n  render() {\n    const { posts, index } = this.state;\n\n    // Rendering a spinner while there is no post to consume.\n    if (!posts)\n      return (\n        <div className=\"loaderContainer\">\n          <CircularProgress />\n        </div>\n      );\n\n    // Assignation of the var needed in the custom template\n    // for string interpolation\n    const mediaUrl = posts[index].media.urls.regular;\n    const avatar = posts[index].media.user.profile_images.medium || \"\";\n    const likeCount = posts[index].media.statistics.likes || \"0\";\n    const personnePersonnes = likeCount < 2 ? \"personne\" : \"personnes\";\n    const lastName = posts[index].media.user.last_name || \"\";\n    const firstName = posts[index].media.user.first_name || \"\";\n    const title = posts[index].title || \"Sans Titre\";\n    const description = posts[index].description || \"Sans dÃ©scriptions\";\n    const timeElapsed =\n      moment(posts[index].media.statistics.created).format(\"D\") || \"\";\n    const jourJours = timeElapsed < 2 ? \"jour\" : \"jours\";\n\n    return (\n      <div className=\"App\">\n        <Card className=\"card animated fadeInRight\">\n          <Grid\n            container\n            spacing={0}\n            direction=\"row\"\n            style={{ height: \"100vh\" }}\n          >\n            <Grid\n              item\n              lg={7}\n              md={7}\n              xl={7}\n              xs={7}\n              className=\"gridPicWrapper\"\n              style={{ overflow: \"hidden\" }}\n            >\n              <img\n                style={{ width: \"100%\" }}\n                title=\"lorem ipsum\"\n                src={mediaUrl}\n                className=\"media\"\n                alt=\"\"\n              />\n              <CardMedia\n                style={{ width: \"100%\", height: \"100%\" }}\n                title=\"lorem ipsum\"\n                image={mediaUrl}\n                className=\"canvaPic\"\n              />\n            </Grid>\n            <Grid item lg={5} md={5} xl={5} xs={5} className=\"grid\">\n              <CardHeader\n                action={\n                  <div className=\"actionWrapper\">\n                    <Typography className=\"name\">\n                      {`${lastName} ${firstName}`}\n                    </Typography>\n                    <Avatar className=\"avatar\" src={avatar} />\n                  </div>\n                }\n              />\n              <CardContent className=\"vAlign\">\n                <Typography variant=\"h4\" color=\"textSecondary\">\n                  <b>{title}</b>\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n                  {description}\n                </Typography>\n              </CardContent>\n              <CardActions disableSpacing className=\"like\">\n                <IconButton aria-label=\"Like the slide\">\n                  <LikeSvg height=\"25px\" width=\"25px\" />\n                </IconButton>\n                <Typography>\n                  {likeCount} {personnePersonnes}\n                </Typography>\n              </CardActions>\n              <Typography className=\"date\">\n                Il y a {timeElapsed} {jourJours}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}