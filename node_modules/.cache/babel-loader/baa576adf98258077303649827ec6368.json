{"ast":null,"code":"var _jsxFileName = \"/Users/joriscarol/DEV/api-carousel/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport { ReactComponent as LikeSvg } from \"@svgr/webpack?-svgo,+titleProp,+ref!./image2vector.svg\";\nimport 'animate.css';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // State initialization\n\n    this.state = {\n      offset: 0,\n      posts: null,\n      limit: 2,\n      index: 0 // post index\n\n    };\n  } // The state loader is builded as a parameterless method that will handle :\n  // I   - The pooling of the API requests.\n  // III - The cyclcling through API fetched posts.\n  // II  - The resulting compoponent\"s state assignation.\n\n\n  async stateLoader() {\n    //  Evaluating the possibility of post iteration. \n    //  If it's possible, then incrementing the state's post index and returning:\n    if (this.state.posts !== null && this.state.index < this.state.limit - 1) {\n      this.setState({\n        index: this.state.index + 1\n      });\n      return;\n    } // If it's not possible to iterate, evaluate if there is no more posts to render.\n    // If so, assigning the index value to offset in the component's state for the upcoming request,\n    // then reset the state's index:\n\n\n    if (this.state.posts !== null && this.state.index === this.state.limit - 1) {\n      this.setState({\n        offset: this.state.index,\n        index: 0\n      });\n    } // If no previous conditions have been met, it means that state.post is null.\n    // Thus we need to load the posts in the component\"s state. At this point in any cases, \n    // state have been properly updated.\n\n\n    const _this$state = this.state,\n          limit = _this$state.limit,\n          offset = _this$state.offset; // Requesting posts to render via state\"s API parameters.\n\n    try {\n      axios({\n        method: \"get\",\n        url: \"https://api.slstice.com/mock/posts?offset=\".concat(offset, \"&limit=\").concat(limit, \"&api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }) // Mapping the responses to request the /medias/ endpoint,\n      // with the propper parameters, for every retrieved post :        \n      .then(async ({\n        data: {\n          response\n        }\n      }) => {\n        const postArray = await Promise.all(response.posts.map(async post => {\n          const _ref = await axios({\n            method: \"get\",\n            url: \"https://api.slstice.com/mock/medias/\".concat(post.mediaId, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }),\n                media = _ref.data.response.media;\n\n          const _ref2 = await axios({\n            method: \"get\",\n            url: \"https://api.slstice.com/mock/users/\".concat(media.owner.username, \"?api_key=ZkUvF7GBqc0l1Ou6DSPf\"),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }),\n                user = _ref2.data.response.user; // Saving freshly fetched media and user object into post\"s properties :\n\n\n          media.user = user;\n          post.media = media;\n          return post;\n        })); // Assignation of the newly fetched array of posts to the component\"s state :\n        //return this.setState({ posts: data });\n\n        return this.state.posts === null ? this.setState({\n          posts: postArray\n        }) : this.setState({\n          posts: [...this.state.posts, ...postArray]\n        });\n      });\n    } catch (err) {\n      console.log(\"Connexion problems. Nothing too dramatic.\\n\" + err);\n    }\n  } // Timer regulating the call to the stateLoader() method\n\n\n  componentDidMount() {\n    // Call upon component mounting\n    this.stateLoader();\n    setInterval(() => {\n      this.stateLoader();\n    }, 6000);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          posts = _this$state2.posts,\n          index = _this$state2.index; // Rendering a spinner while there is no post to consume.\n\n    if (!posts) return React.createElement(\"div\", {\n      className: \"loaderContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })); // Assignation of the var needed in the custom template\n    // for string interpolation\n\n    const mediaUrl = posts[index].media.urls.regular;\n    const avatar = posts[index].media.user.profile_images.medium || \"\";\n    const likeCount = posts[index].media.statistics.likes || \"0\";\n    const personnePersonnes = likeCount < 2 ? \"personne\" : \"personnes\";\n    const lastName = posts[index].media.user.last_name || \"\";\n    const firstName = posts[index].media.user.first_name || \"\";\n    const title = posts[index].title || \"Sans Titre\";\n    const description = posts[index].description || \"Sans dÃ©scriptions\";\n    const timeElapsed = moment(posts[index].media.statistics.created).format(\"D\") || \"\";\n    const jourJours = timeElapsed < 2 ? \"jour\" : \"jours\";\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"card animated fadeInRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 0,\n      direction: \"row\",\n      style: {\n        height: \"100vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 7,\n      md: 7,\n      xl: 7,\n      xs: 7,\n      className: \"gridPicWrapper\",\n      style: {\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: \"100%\"\n      },\n      title: \"lorem ipsum\",\n      src: mediaUrl,\n      className: \"media\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(CardMedia, {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      title: \"lorem ipsum\",\n      image: mediaUrl,\n      className: \"canvaPic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      lg: 5,\n      md: 5,\n      xl: 5,\n      xs: 5,\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      action: React.createElement(\"div\", {\n        className: \"actionWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"\".concat(lastName, \" \").concat(firstName)), React.createElement(Avatar, {\n        className: \"avatar\",\n        src: avatar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      className: \"vAlign\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, title)), React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, description)), React.createElement(CardActions, {\n      disableSpacing: true,\n      className: \"like\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-label\": \"Like the slide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(LikeSvg, {\n      height: \"25px\",\n      width: \"25px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, likeCount, \" \", personnePersonnes)), React.createElement(Typography, {\n      className: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Il y a \", timeElapsed, \" \", jourJours)))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/joriscarol/DEV/api-carousel/src/App.js"],"names":["React","Component","axios","moment","CircularProgress","Card","CardActions","CardContent","Grid","Typography","CardHeader","Avatar","IconButton","CardMedia","App","constructor","props","state","offset","posts","limit","index","stateLoader","setState","method","url","headers","then","data","response","postArray","Promise","all","map","post","mediaId","media","owner","username","user","err","console","log","componentDidMount","setInterval","render","mediaUrl","urls","regular","avatar","profile_images","medium","likeCount","statistics","likes","personnePersonnes","lastName","last_name","firstName","first_name","title","description","timeElapsed","created","format","jourJours","height","overflow","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport { ReactComponent as LikeSvg } from \"./image2vector.svg\";\n\nimport 'animate.css';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // State initialization\n    this.state = { \n      offset: 0,\n      posts: null,\n      limit: 2,\n      index: 0, // post index\n    }\n  }\n\n// The state loader is builded as a parameterless method that will handle :\n// I   - The pooling of the API requests.\n// III - The cyclcling through API fetched posts.\n// II  - The resulting compoponent\"s state assignation.\nasync stateLoader() {\n    //  Evaluating the possibility of post iteration. \n    //  If it's possible, then incrementing the state's post index and returning:\n    if (this.state.posts !== null && this.state.index < this.state.limit - 1) {\n      this.setState({index : this.state.index + 1});\n      return;\n    }\n    // If it's not possible to iterate, evaluate if there is no more posts to render.\n    // If so, assigning the index value to offset in the component's state for the upcoming request,\n    // then reset the state's index:\n    if (this.state.posts !== null && this.state.index === this.state.limit - 1) {\n      this.setState({\n        offset : this.state.index,\n        index : 0\n      });\n    }\n    // If no previous conditions have been met, it means that state.post is null.\n    // Thus we need to load the posts in the component\"s state. At this point in any cases, \n    // state have been properly updated.\n    \n    const { limit, offset } = this.state;\n\n    // Requesting posts to render via state\"s API parameters.\n    try {\n        axios({\n          method: \"get\",\n          url: `https://api.slstice.com/mock/posts?offset=${offset}&limit=${limit}&api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n          headers: {\n            \"Content-Type\": \"application/json\",\n          }\n        })\n        // Mapping the responses to request the /medias/ endpoint,\n        // with the propper parameters, for every retrieved post :        \n        .then(async ({ data: { response } }) => {\n            const postArray = await Promise.all(response.posts.map(async (post) => {\n            const { data: { response: { media } } } = await axios({\n              method: \"get\",\n              url: `https://api.slstice.com/mock/medias/${post.mediaId}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n              headers: {\n                \"Content-Type\": \"application/json\",\n              }\n            });\n            const { data: { response: { user } } } = await axios({\n              method: \"get\",\n              url: `https://api.slstice.com/mock/users/${media.owner.username}?api_key=ZkUvF7GBqc0l1Ou6DSPf`,\n              headers: {\n                \"Content-Type\": \"application/json\",\n              }\n            });\n            // Saving freshly fetched media and user object into post\"s properties :\n            media.user = user;\n            post.media = media;\n            return post;\n          }));\n        // Assignation of the newly fetched array of posts to the component\"s state :\n        //return this.setState({ posts: data });\n        return (this.state.posts === null) ? this.setState({posts : postArray}) : this.setState({ posts: [...this.state.posts, ...postArray] });\n      }) \n    } catch(err){\n      console.log(\"Connexion problems. Nothing too dramatic.\\n\" + err)\n    }\n  }\n  \n  // Timer regulating the call to the stateLoader() method\n  componentDidMount() {\n    // Call upon component mounting\n    this.stateLoader();\n    setInterval(()=>{\n      this.stateLoader()}\n      ,6000);\n  }\n  \n\n  render () {\n    const { posts, index } = this.state    \n    \n    // Rendering a spinner while there is no post to consume.\n    if (!posts) return <div className=\"loaderContainer\"><CircularProgress /></div>\n\n    // Assignation of the var needed in the custom template\n    // for string interpolation\n    const mediaUrl = posts[index].media.urls.regular;\n    const avatar = posts[index].media.user.profile_images.medium || \"\";\n    const likeCount = posts[index].media.statistics.likes || \"0\";\n    const personnePersonnes = (likeCount < 2) ? \"personne\" : \"personnes\";\n    const lastName = posts[index].media.user.last_name || \"\"\n    const firstName = posts[index].media.user.first_name || \"\";\n    const title = posts[index].title || \"Sans Titre\";\n    const description = posts[index].description || \"Sans dÃ©scriptions\";\n    const timeElapsed = moment(posts[index].media.statistics.created).format(\"D\") || \"\";\n    const jourJours = (timeElapsed < 2) ? \"jour\" : \"jours\";\n\n    return (\n      <div className=\"App\">\n        <Card className=\"card animated fadeInRight\">\n          <Grid\n            container\n            spacing={0}\n            direction=\"row\"\n            style={{height :\"100vh\"}}\n          >\n            <Grid item lg={7} md={7} xl={7} xs={7} className=\"gridPicWrapper\" style={{overflow: \"hidden\"}}>\n              <img\n                style={{width: \"100%\"}}\n                title=\"lorem ipsum\"\n                src={mediaUrl}\n                className=\"media\"\n                alt=\"\"\n              />\n              <CardMedia\n                style={{width: \"100%\", height: \"100%\"}}\n                title=\"lorem ipsum\"\n                image={mediaUrl}\n                className=\"canvaPic\"\n              />\n            </Grid>\n            <Grid item lg={5} md={5} xl={5} xs={5} className=\"grid\">\n              <CardHeader\n              action={\n                <div className=\"actionWrapper\">\n                  <Typography className=\"name\">\n                    {`${lastName} ${firstName}`}\n                  </Typography>\n                  <Avatar className=\"avatar\" src={avatar} />\n                </div>\n              } />\n              <CardContent className=\"vAlign\">\n                <Typography variant=\"h4\" color=\"textSecondary\">\n                   <b>{title}</b>\n                 </Typography>\n                 <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n                   {description}\n                 </Typography>\n              </CardContent>\n              <CardActions disableSpacing className=\"like\"> \n                <IconButton aria-label=\"Like the slide\">\n                  <LikeSvg height=\"25px\" width=\"25px\"/>\n                </IconButton>\n                <Typography>\n                  {likeCount} {personnePersonnes}\n                </Typography>\n              </CardActions>\n              <Typography className=\"date\">\n                Il y a {timeElapsed} {jourJours}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Card>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}